; test model: "hand holds cup -> (hand at position p -> cup at position p)"
;
; 1 - construction:
; build an abstraction group (abst_grp: contains abstraction programs (abst_pgmx)).
; build three r-groups (r_grpx) made visible from abst_grp.
; populate each r-group, i.e. inject objects in the r-groups: they are abstracted by the ipgm in abst_grp (see i_abst_pgm1).
; after 90ms, the model is built and projected onto stdin (see build_model) so it gets inputs from there (like any program).
; after 100 ms (i.e. the upr of abst_grp), the r-groups are no longer projected in abst_grp, this switches abstraction off.
; caveat: do not define constraints on facts' timings in abstraction programs.
;
; 2 - forward chaining:
; after 120ms, inject samples in stdin: the r-groups will reduce them and produce predictions (mk.pred).
; N.B.: do not inject anything in r-groups after the construction phase.
;
; 3 - backward chaining:
; after 120ms (simultaneously wrt forward chaining), inject a goal: r-groups will produce sub-goals (mk.sgoal).
;
; 4 - interaction with I/O devices:
; these devices are simulated in replicode and provide the answers real devices would give.
; that's a mere convenience for this tutorial.


; 1
; build the abstraction group and programs.

abst_grp:(std_grp 1 0 0 0 [root])
[]
   [SYNC_FRONT now 0 forever root nil COV_OFF 0]

abst_pgm1:(pgm
[]
   (ptn val1:(val_hld ::) |[])
   (ptn val2:(val_hld ::) |[])
   (ptn val3:(val_hld ::) |[])
[]
   []
      (ptn f:(fact in:(mk.val : hold ::) ::) |[])
   |[]
   |[]
[]
   (subst [in.obj val1]); use the values in the same order as they appear in the tpl arg list.
   (subst [in.val val2])
   (subst [f.time val3])
1
)
|[]

i_abst_pgm1:(ipgm abst_pgm1 []
   (val_hld 0); 0 is the tolerance to be used for variable identification.
   (val_hld 0)
   (val_hld 0.20472); tolerances are discretized (internally encoded on 7 bits), so the actual tolerance is an approximation of the value you pass here.
RUN_ALWAYS 0us SILENT 1)
[]
   [SYNC_FRONT now 0 forever abst_grp nil 1]

abst_pgm2:(pgm
[]
   (ptn val1:(val_hld ::) |[])
   (ptn val2:(val_hld ::) |[])
   (ptn val3:(val_hld ::) |[])
[]
   []
      (ptn f:(fact in:(mk.val : position ::) ::) |[])
   |[]
   |[]
[]
   (subst [in.obj val1])
   (subst [in.val val2])
   (subst [f.time val3])
1
)
|[]

i_abst_pgm2:(ipgm abst_pgm2 []
   (val_hld 0)
   (val_hld 0.10236)
   (val_hld 0.20472)
RUN_ALWAYS 0us SILENT 1)
[]
   [SYNC_FRONT now 0 forever abst_grp nil 1]

abst_pgm3:(pgm
[]
   (ptn val1:(val_hld ::) |[])
   (ptn val2:(val_hld ::) |[])
   (ptn val3:(val_hld ::) |[])
[]
   []
      (ptn f:(fact in:(mk.val : color ::) ::) |[])
   |[]
   |[]
[]
   (subst [in.obj val1])
   (subst [in.val val2])
   (subst [f.time val3])
1
)
|[]

i_abst_pgm3:(ipgm abst_pgm3 []
   (val_hld 0)
   (val_hld 0.10236)
   (val_hld 0.20472)
RUN_ALWAYS 0us SILENT 1)
[]
   [SYNC_FRONT now 0 forever abst_grp nil 1]

; build the model: first the r-groups, then their population.

r_grp1:(std_rgrp 0 0 0 0)
[]
   [SYNC_FRONT now 0 1 abst_grp nil COV_OFF 1]; make r_grp1 visible from abst_grp to allow abstraction programs..
                                              ; reducing the content of r_grp; notice the resilience set to 1.
r_grp2:(std_rgrp 0 0 0 0)
[]
   [SYNC_FRONT now 0 forever r_grp1 nil COV_OFF 0]; project the child on its parent before anywhere else.
   [SYNC_FRONT now 0 1 abst_grp nil COV_OFF 1]

r_grp3:(std_rgrp 0 0 0 0)
[]
   [SYNC_FRONT now 0 forever r_grp2 nil COV_OFF 0]; project the child on its parent before anywhere else.
   [SYNC_FRONT now 0 1 abst_grp nil COV_OFF 1]

hand_holds_cup:(mk.val hand hold cup 1)
|[]

(fact hand_holds_cup 0us 1 1)
[]
   [SYNC_STATE now 1 1 r_grp1 nil]

cup_col:(mk.val cup color (vec3 1 1 1) 1)
|[]

(fact cup_col 0us 1 1)
[]
   [SYNC_STATE now 1 1 r_grp1 nil]

hand_pos:(mk.val hand position (vec3 0 0 0) 1)
|[]

(fact hand_pos 0us 1 1)
[]
   [SYNC_STATE now 1 1 r_grp2 nil]

cup_pos:(mk.val cup position (vec3 0 0 0) 1)
|[]

(fact cup_pos 0us 1 1)
[]
   [SYNC_STATE now 1 1 r_grp3 nil]

build_model:(pgm |[] |[] []
   (inj []
      fmd:(fmd r_grp1 [root] [root] 4000us 1); fmd points to the head r-group.
      [SYNC_FRONT now 0 forever stdin nil 1]; put the fmd in stdin, in an active state.
   )
   (inj []
      (imd r_grp3 [root] [root] fmd 1); imd points to the tail r-group.
      [SYNC_FRONT now 0 forever stdin nil 1]; put the imd in stdin, in an active state.
   )
1)
|[]

i_build_model:(ipgm build_model |[] RUN_ONCE 90000us SILENT 1)
[]
   [SYNC_FRONT now 0 1 root nil 1]


; 2
; inject inputs in stdin to be matched by the model (will trigger the production of predictions/assumptions).

inject_inputs:(pgm |[] |[] []
   (inj []
      (fact hand_holds_cup now 1 1)
      [SYNC_FRONT now 1 1 stdin nil]
   )
   (inj []
      (fact cup_col now 1 1)
      [SYNC_FRONT now 1 1 stdin nil]
   )
   (inj []
      new_hand_pos:(mk.val hand position (vec3 2 2 2) 1)
      [SYNC_FRONT now 1 1 stdin nil]
   )
   (inj []
      (fact new_hand_pos now 1 1)
      [SYNC_FRONT now 1 1 stdin nil]
   )
   (inj []
      new_cup_pos:(mk.val cup position (vec3 2 2 2) 1)
      [SYNC_FRONT now 1 1 stdin nil]
   )
   (inj []
      (fact new_cup_pos now 1 1)
      [SYNC_FRONT now 1 1 stdin nil]
   )
1)
|[]

i_inject_inputs:(ipgm inject_inputs |[] RUN_ONCE 120000us SILENT 1)
[]
   [SYNC_FRONT now 0 forever root nil 0]


; an assumption is produced (mk.asmp (fact (mk.val cup pos (vec3 2 2 2) 1) new_t 1) fmd 1 1).
; it is an assumption (and not a prediction) since the predicted time is <= the time at which the conclusion is produced.
; the validity of the assumption is checked and this produces a mk.success on the assumption.


; 3
; inject one goal in stdin.
; make sure no object injected here gets in the forward model (here sln=0;
; alternatively we could have the inverse model take its inputs from another group than stdin).

inject_goal:(pgm |[] |[] []
   (inj []
      target:(mk.val cup position (vec3 3 3 3) 1)
      [SYNC_FRONT now 0 1 stdin nil]
   )
   (inj []
      goal_target:(fact target (+ now 20000) 1 1)
      [SYNC_FRONT now 0 1 stdin nil]
   )
   (inj []
      goal:(mk.goal goal_target nil 1)
      [SYNC_FRONT now 1 1 stdin nil]
   )
   (inj []
      (fact goal now 1 1)
      [SYNC_FRONT now 1 1 stdin nil]
   )
1)
|[]

i_inject_goal:(ipgm inject_goal |[] RUN_ONCE 140000us NOTIFY 1)
[]
   [SYNC_FRONT now 0 2 root nil 1]

; the goal (mk.goal (fact (mk.val a_variable hold cup 1) 160000us 1) imd0 1) is produced.
; the goal is monitored and this produces a failure, i.e. (|fact (mk.success ...)), since no such input exists at the specified time,
; unless the device simulation is activated (see below): then the goals succeed.


; how to catch the goal and trigger the calling of a debug probe.
; prb args: [dbg lvl, callback name, list of objects to be passed to the callbeck].
; callback is some custom c++ code defined in usr_operators.dll.
; currently only one probe callback is defined: "print".
; to be executed, a probe shall be passed a dbg lvl < probe level as defined in settings.xml.

prb_catch_goal:(pgm
|[]
[]
   []
      (ptn (fact goal:(mk.goal target:(fact ::) ::) ::) |[])
   |[]
   |[]
[]
   (prb [1 "print" "got goal" [goal target target.obj]]); trace the goal, its target (a fact) and the object it refers to.
1)
|[]

i_prb_catch_goal:(ipgm prb_catch_goal |[] RUN_ALWAYS 0us SILENT 1)
[]
   [SYNC_FRONT now 0 forever root nil 0]; set act to 1 to let the ipgm run.


; 4
; devices are simulated: a quick way to experiment with goals/predictions
; without using the mBrane I/O modules.
; in an operational setup, the pgms below would send command to the devices instead of injecting what
; the devices would have answered.

; simulation of a grasping device: when the goal "hold the cup" is issued, simulates the performance of "grab cup";
; also reports the color of the cup.

grab:(pgm |[]
[]
   []
      (ptn (fact goal:(mk.goal (fact (mk.val hand hold what: ::) when: ::) ::) ::) |[])
   |[]
   |[]
[]
   (inj []
      target:(mk.val hand hold what 1)
      [SYNC_FRONT now 0 1 stdin nil]
   )
   (inj []
      (fact target when 1 1)
      [SYNC_FRONT now 1 1 stdin nil]
   )
   (inj []
      (fact cup_col when 1 1)
      [SYNC_FRONT now 1 1 stdin nil]
   )
1)
|[]

i_grab:(ipgm grab |[] RUN_ALWAYS 0us NOTIFY 1)
[]
   [SYNC_FRONT now 0 forever root nil 1]

   
; simulation of a hand-moving device: when the goal "have the hand at position P" is issued, simulates the performance of "move hand to P".
; also reports the cup's position.

move:(pgm |[]
[]
   []
      (ptn (fact goal:(mk.goal (fact (mk.val hand position where: ::) when: ::) ::) ::) |[])
   |[]
   |[]
[]
   (inj []
      h_target:(mk.val hand position where 1)
      [SYNC_FRONT now 0 1 stdin nil]
   )
   (inj []
      (fact h_target when 1 1)
      [SYNC_FRONT now 1 1 stdin nil]
   )
   (inj []
      c_target:(mk.val cup position where 1)
      [SYNC_FRONT now 0 1 stdin nil]
   )
   (inj []
      (fact c_target when 1 1)
      [SYNC_FRONT now 1 1 stdin nil]
   )
1)
|[]

i_move:(ipgm move |[] RUN_ALWAYS 0us NOTIFY 1)
[]
   [SYNC_FRONT now 0 forever root nil 1]
